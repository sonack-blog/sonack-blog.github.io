<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这次试试能写多久博客</title>
  
  <subtitle>Sonack Blog</subtitle>
  <link href="https://sonack.com/atom.xml" rel="self"/>
  
  <link href="https://sonack.com/"/>
  <updated>2019-03-01T09:08:53.853Z</updated>
  <id>https://sonack.com/</id>
  
  <author>
    <name>sonack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CNN架构解析</title>
    <link href="https://sonack.com/2019/03/01/34d6b7da253e/"/>
    <id>https://sonack.com/2019/03/01/34d6b7da253e/</id>
    <published>2019-03-01T08:06:59.000Z</published>
    <updated>2019-03-01T09:08:53.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeNet-5"><a href="#LeNet-5" class="headerlink" title="LeNet-5"></a>LeNet-5</h2><p>Yann LeCun</p><p><img src="https://static.oschina.net/uploads/space/2018/0311/012923_Ficx_876354.png" alt="lenet5"></p><ul><li>输入: 32x32</li><li>Ci: 卷积层</li><li>Si: 下采样层(池化层)</li><li>Fi: 全连接层</li></ul><p><em>Note: Ci 默认stride=1</em></p><table><thead><tr><th align="center">Layer</th><th align="center">Description</th><th align="center">Output</th><th align="center">Notes</th></tr></thead><tbody><tr><td align="center"><strong>INPUT</strong></td><td align="center">32x32</td><td align="center">32x32</td><td align="center">-</td></tr><tr><td align="center">C1</td><td align="center">卷积层 6x5x5(filter_num x filter_size x filter_size)</td><td align="center">6x28x28(CxHxW)</td><td align="center">参数量=5x5x6+1(1为bias)</td></tr><tr><td align="center">S2</td><td align="center">下采样层 2x2,s=2</td><td align="center">6x14x14</td><td align="center">None</td></tr><tr><td align="center">C3</td><td align="center">16x5x5</td><td align="center">16x10x10</td><td align="center">-</td></tr><tr><td align="center">S4</td><td align="center">2x2,s=2</td><td align="center">16x5x5</td><td align="center">-</td></tr><tr><td align="center">C5</td><td align="center">120x5x5</td><td align="center">120x1x1</td><td align="center">全连接</td></tr><tr><td align="center">F6</td><td align="center">84</td><td align="center">84</td><td align="center">7x12的比特图编码</td></tr><tr><td align="center"><strong>OUTPUT</strong></td><td align="center">10</td><td align="center">10</td><td align="center">-</td></tr></tbody></table><p>输出层:</p><ol><li>Output层也是全连接层，共有10个节点，分别代表数字0到9。如果第i个节点的值为0，则表示网络识别的结果是数字i。</li><li>采用径向基函数(RBF)网络连接方式<br><img src="https://static.oschina.net/uploads/space/2018/0311/013103_iVGG_876354.png"><br>上式中的Wij的值由i的比特图编码确定，i从0到9，j取值从0到7×12-1。<br>RBF输出的值越接近于0，表示当前网络输入的识别结果与字符i越接近。</li></ol><hr><h2 id="AlexNet-2012"><a href="#AlexNet-2012" class="headerlink" title="AlexNet(2012)"></a>AlexNet(2012)</h2><p>Alex Krizhevsky(Geoffrey Hinton)<br>ILSVRC12冠军</p><p>特点:</p><ol><li><p>使用ReLU激活函数<br>收敛速度比sigmoid/tanh快很多<br><img src="https://static.oschina.net/uploads/space/2018/0312/010818_RCcD_876354.png"></p></li><li><p>防止过拟合：Dropout、Data augmentation、重叠池化(s &lt; k)</p></li></ol><p>LRN: Local Response Normalization<br>模拟生物学上的侧抑制(lateral inhibitio),被激活的神经元会抑制相邻神经元。</p><p><img src="https://static.oschina.net/uploads/space/2018/0312/010857_080B_876354.png"></p><p>有助于增加泛化能力。</p><ol start="3"><li>其它: 多GPU训练, LRN层</li></ol><p>两块GTX580 GPU</p><p><img src="https://static.oschina.net/uploads/space/2018/0312/010926_sUJd_876354.png"></p><p>8层(5层卷积+3层全连接)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeNet-5&quot;&gt;&lt;a href=&quot;#LeNet-5&quot; class=&quot;headerlink&quot; title=&quot;LeNet-5&quot;&gt;&lt;/a&gt;LeNet-5&lt;/h2&gt;&lt;p&gt;Yann LeCun&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.oschina</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实验报告——生成式对抗网络(GAN)</title>
    <link href="https://sonack.com/2019/01/03/94d61d0ae704/"/>
    <id>https://sonack.com/2019/01/03/94d61d0ae704/</id>
    <published>2019-01-03T13:15:46.000Z</published>
    <updated>2019-01-03T13:27:33.176Z</updated>
    
    <content type="html"><![CDATA[<p>人工智能实验报告，关于GAN\WGAN\WGAN-GP的理论和实验分析。</p><span id="more"></span><hr><p><img src="https://s2.ax1x.com/2019/01/03/Fo2Nyn.jpg" alt="1"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/Fo26SJ.jpg" alt="2"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/Fo2gyR.jpg" alt="3"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/Fo2Wex.jpg" alt="4"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/Fo2ztS.jpg" alt="5"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRSfg.jpg" alt="6"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoR9pQ.jpg" alt="7"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRP6s.jpg" alt="8"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRkmq.jpg" alt="9"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRA00.jpg" alt="10"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRZkT.jpg" alt="11"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRmhF.jpg" alt="12"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRMc9.jpg" alt="13"></p><hr><p><img src="https://s2.ax1x.com/2019/01/03/FoRQXR.jpg" alt="14"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;人工智能实验报告，关于GAN\WGAN\WGAN-GP的理论和实验分析。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>[Math] Linear Algebra Summary</title>
    <link href="https://sonack.com/2018/12/18/f2932d0b988e/"/>
    <id>https://sonack.com/2018/12/18/f2932d0b988e/</id>
    <published>2018-12-18T13:49:37.000Z</published>
    <updated>2018-12-19T16:35:38.189Z</updated>
    
    <content type="html"><![CDATA[<p>Notes on Hung Yi Lee’s Linear Algebra Courses.</p><span id="more"></span><h2 id="1-What-are-we-going-to-learn"><a href="#1-What-are-we-going-to-learn" class="headerlink" title="1. What are we going to learn?"></a>1. What are we going to learn?</h2><h3 id="Linear-System"><a href="#Linear-System" class="headerlink" title="Linear System"></a>Linear System</h3><p>A System has input and output (Function, Transformation, Operator).</p><p>Linear System:  $F(k1 * x1 + k2 * x2) = k1 * F(x1) + k2\ * F(x2)$</p><ul><li>Preserving Multiplication<ul><li>F(kx) = ky (Assuming F(x) = y)</li></ul></li><li>Preserving Addition<ul><li>F(x1 + x2) = y1 + y2 (Assuming F(x1) = y1, F(x2) = y2)</li></ul></li></ul><p>对于multiple inputs/outputs, 将其看作一个vector input/output.</p><h3 id="Linear-System-System-of-Linear-Equations"><a href="#Linear-System-System-of-Linear-Equations" class="headerlink" title="Linear System = System of Linear Equations"></a>Linear System = System of Linear Equations</h3><p>Easy check, System of Linear Equations is a Linear System<br>And also, every linear system can be described by a system of linear equations.</p><p>Try input e1, e2, … en, the output is p1, p2, … pn, then [p1, p2, …, pn]X = b is the system of linear equations describing the linear system.</p><h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><ul><li>Matrix M is a set of vectors<ul><li>m rows and n cols, then M is m by n, written m x n.</li><li>(i, j) entry is the i-th row, j-th col element (starting from 1 rather than 0 😁)</li><li>Same size matrices can add or subtract</li><li>Matrix multiply by a scalar is every entry mul by it.</li></ul></li></ul><h4 id="Matrix-Vector-Product"><a href="#Matrix-Vector-Product" class="headerlink" title="Matrix-Vector Product"></a>Matrix-Vector Product</h4><p>$Ax=b, A(m*n), x(n*1), b(m*1)$<br>A is coefficients of the system of linear equations.</p><ul><li>Column Aspect: Columns Linear Combination according to X</li><li>Row Aspect: Row dot X to get one entry</li></ul><p>$ Ae_j = a_j $ for j = 1, 2, … n, where $e_j$ is the j-th standard vector in $R^n$</p><h4 id="Having-Solution-or-Not"><a href="#Having-Solution-or-Not" class="headerlink" title="Having Solution or Not"></a>Having Solution or Not</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;Notes on Hung Yi Lee’s Linear Algebra Courses.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Math" scheme="https://sonack.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>动态规划专题</title>
    <link href="https://sonack.com/2018/11/26/0a094eaa51ce/"/>
    <id>https://sonack.com/2018/11/26/0a094eaa51ce/</id>
    <published>2018-11-26T09:14:15.000Z</published>
    <updated>2021-12-07T18:11:40.486Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划(Dynamic Programming, DP)。</p><h2 id="DP总结"><a href="#DP总结" class="headerlink" title="DP总结"></a>DP总结</h2><h3 id="动态规划分类"><a href="#动态规划分类" class="headerlink" title="动态规划分类"></a>动态规划分类</h3><ol><li>基础<ul><li>简单递推</li><li>LCS (最长公共子序列/串)</li><li>LIS (最长上升子序列/串)</li><li>背包问题 (0-1\多重\完全\分组)</li></ul></li><li>区间DP</li><li>树形DP</li><li>数位DP</li><li>期望DP</li><li>状压DP(插头DP等)</li></ol><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>最优子结构<ul><li>问题的最优解包含子问题的最优解</li></ul></li><li>重叠子问题<ul><li>f(x) 被重复调用计算</li><li>记忆化搜索</li></ul></li><li>无后效性</li></ul><h3 id="例题s"><a href="#例题s" class="headerlink" title="例题s"></a>例题s</h3><h4 id="简单递推"><a href="#简单递推" class="headerlink" title="简单递推"></a>简单递推</h4><h5 id="HDU-2084-数塔"><a href="#HDU-2084-数塔" class="headerlink" title="HDU 2084. 数塔"></a>HDU 2084. 数塔</h5><p><em>状态定义：</em><br>$dp[i][j]$: 从(0,0)走到(i,j)的最大路径和</p><p><em>状态转移方程：</em><br>$dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + num[i][j] \quad(j &gt;= 1)$<br>$dp[i][j] = dp[i - 1][j] + num[i][j] \quad(j == 0)$</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-comment">// HDU 2084</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> T, N;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><span class="hljs-keyword">int</span> dp[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) {<br>        cin &gt;&gt; N;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i + <span class="hljs-number">1</span>; ++j) {<br>                cin &gt;&gt; a[i][j];<br>            }<br>        }<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt; N; ++l) {<br>            dp[l][<span class="hljs-number">0</span>] = dp[l - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + a[l][<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> e = <span class="hljs-number">1</span>; e &lt; l + <span class="hljs-number">1</span>; ++e) {<br>                dp[l][e] = <span class="hljs-built_in">max</span>(dp[l - <span class="hljs-number">1</span>][e], dp[l - <span class="hljs-number">1</span>][e - <span class="hljs-number">1</span>]) + a[l][e];<br>            }<br>        }<br>        <span class="hljs-keyword">int</span> ans = dp[N - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++ i) {<br>            ans = <span class="hljs-built_in">max</span>(ans, dp[N - <span class="hljs-number">1</span>][i]);<br>        }<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="HDU-2018-母牛的故事"><a href="#HDU-2018-母牛的故事" class="headerlink" title="HDU 2018 母牛的故事"></a>HDU 2018 母牛的故事</h5><p>斐波那契数列</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-comment">// HDU 2018 母牛的故事</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">55</span>;<br>ll f[MAXN] = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};<br><br><span class="hljs-comment">// {1, 2, 3, 4, 6}</span><br><span class="hljs-comment">// f[n] = f[n-1] + f[n-3]</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt; MAXN; ++i)<br>    {<br>        f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">3</span>];<br>    }<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">if</span> (!n) <span class="hljs-keyword">break</span>;<br>        cout &lt;&lt; f[n - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="HDU-2044-一只小蜜蜂"><a href="#HDU-2044-一只小蜜蜂" class="headerlink" title="HDU 2044 一只小蜜蜂"></a>HDU 2044 一只小蜜蜂</h5><p><img src="http://acm.hdu.edu.cn/data/images/C40-1001-1.jpg"></p><p>根据对称性，发现从a到b等价于从1到b-a+1.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">55</span>;<br>ll dp[MAXN] = {<span class="hljs-number">0</span>, <span class="hljs-number">1</span>};<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-keyword">int</span> T, a, b;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; MAXN; ++i) {<br>        dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>    }<br>    <span class="hljs-keyword">while</span> (T--) {<br>        cin &gt;&gt; a &gt;&gt; b;<br>        cout &lt;&lt; dp[b - a + <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="HDU-2041-超级楼梯"><a href="#HDU-2041-超级楼梯" class="headerlink" title="HDU 2041 超级楼梯"></a>HDU 2041 超级楼梯</h5><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">55</span>;<br>ll dp[MAXN] = {<span class="hljs-number">1</span>, <span class="hljs-number">1</span>};<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-keyword">int</span> T, a, b;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; MAXN; ++i) {<br>        dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>    }<br>    <span class="hljs-keyword">while</span> (T--) {<br>        cin &gt;&gt; a;<br>        cout &lt;&lt; dp[a - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="HDU-2050-折线分割平面"><a href="#HDU-2050-折线分割平面" class="headerlink" title="HDU 2050 折线分割平面"></a>HDU 2050 折线分割平面</h5><p><img src="http://acm.hdu.edu.cn/data/images/C40-1008-1.jpg"></p><p>退化考虑两条平行直线分割的情况，退化考虑直线分割的情况。</p><p>直线分割平面：</p><div class="hljs code-wrapper"><pre><code>N条🍌直线最多可以把平面分割成多少块？</code></pre></div><p><img src="http://s10.sinaimg.cn/bmiddle/76eabc154a56c70cbb6d9&amp;690"></p><p>考虑添加第N条直线时，为了最多分割，必须要与前N-1条直线都🍌，且没有任何三条直线交于一点，第N条直线有N-1个交点，因为每增加N个交点，就增加N+1个平面(考虑交点之间的线段，将所在的原来的平面分为了2份，N个交点有N+1段)，因此第N条直线增加N个平面，第一条直线有划分2个平面，因此N条直线最多分割平面 $$2+2+3+4+5+…+N=1+\frac{N*(N+1)}{2}$$.</p><p>考虑每次增加2条平行直线，</p><p><img src="http://s10.sinaimg.cn/bmiddle/76eabc154a56c7603a059&amp;690"></p><p>类似于直线分割平面，考虑第N次添加时，前面已经有$2*(N-1)$条直线了，所以第N次添加的两条直线，即第$2N-1$和第$2N$条直线，各能增加$2*N-1$个平面。因此第N次添加增加的块数是$2*(2*N-1)=4*N-2$，因此最多分割平面数为 $$1+\frac{4N*(N+1)}{2}-2N=2N^2+1$$.</p><p><img src="http://s9.sinaimg.cn/bmiddle/76eabc15076f13f4189b8&amp;690"></p><p>再来看这道题，如果将每次加入的平行边的一头🍌，1,3面合为一个面，则会少一个面，每次添加折线都会比添加平行线少一个面，因此N条直线后会少N个面，因此N条折线最多分割平面数为$$2N^2-N+1$$.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-keyword">int</span> T, n;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) {<br>        cin &gt;&gt; n;<br>        cout &lt;&lt; <span class="hljs-number">2</span> * n * n + <span class="hljs-number">1</span> - n &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="CF-429B-Working-Out"><a href="#CF-429B-Working-Out" class="headerlink" title="CF 429B Working Out"></a>CF 429B Working Out</h5><div class="hljs code-wrapper"><pre><code>给出一个矩阵，一个人从左上角走到右下角，一个人从左下角走到右上角，两个人的轨迹只会在一个点相交，问两个人经过路径上的数的和最大的情况下最大和是多少(交点的数不算)。</code></pre></div><p><img src="https://images2018.cnblogs.com/blog/1139527/201806/1139527-20180601021437524-649934639.jpg"></p><p>枚举交点(i,j)</p><ul><li>dp1[i][j]: 从(1,1)到(i,j)的最大分数，注意只能从(i,j)的左面或者上面来</li><li>dp2[i][j]: 从(i,j)到(n,m)的最大分数，注意去向是向右或者向下</li><li>dp3[i][j]: 从(n,1)到(i,j)的最大分数，注意只能从(i,j)的左面或者下面来</li><li>dp4[i][j]: 从(i,j)到(1,m)的最大分数, 注意去向是向右或者向上</li></ul><p>注意交点一定不可能在边界处取得，比如都在左边界(x,1)🍌的话，则不能都往右走，肯定要有一个向上或者向下，而对方一定就是从那来的，因此交点肯定不止一个。这题一开始理解错了，对两者速度不同，如果理解成可以不止一个交点，但两者同时都在的交点只有一个的话，则同样的路径，无法保证同时都在的交点数有多少个（即使两者路径完全重合，也可以是一个跑🏃，一个追，永远没有相遇的时候），这样任何方案都无法保证满足只相遇在一个健身房的条件，题目没有意义，只能理解成两者路径轨迹只有一个交点的意思。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e3</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> dp1[MAXN][MAXN], dp2[MAXN][MAXN], dp3[MAXN][MAXN], dp4[MAXN][MAXN], a[MAXN][MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-keyword">int</span> n, m;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;m)) {<br>        <span class="hljs-built_in">memset</span>(dp1, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dp1));<br>        <span class="hljs-built_in">memset</span>(dp2, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dp2));<br>        <span class="hljs-built_in">memset</span>(dp3, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dp3));<br>        <span class="hljs-built_in">memset</span>(dp4, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dp4));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) {<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i][j]);<br>            }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) {<br>                dp1[i][j] = <span class="hljs-built_in">max</span>(dp1[i<span class="hljs-number">-1</span>][j], dp1[i][j<span class="hljs-number">-1</span>]) + a[i][j];<br>            }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; --i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; --j) {<br>                dp2[i][j] = <span class="hljs-built_in">max</span>(dp2[i+<span class="hljs-number">1</span>][j], dp2[i][j+<span class="hljs-number">1</span>]) + a[i][j];<br>            }<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; --i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++j) {<br>                dp3[i][j] = <span class="hljs-built_in">max</span>(dp3[i+<span class="hljs-number">1</span>][j], dp3[i][j<span class="hljs-number">-1</span>]) + a[i][j];<br>            }<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; --j) {<br>                dp4[i][j] = <span class="hljs-built_in">max</span>(dp4[i<span class="hljs-number">-1</span>][j], dp4[i][j+<span class="hljs-number">1</span>]) + a[i][j];<br>            }<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; ++i)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j &lt; m; ++j)<br>            {<br>                <span class="hljs-comment">// 上-&gt;下 左-&gt;右</span><br>                ans = <span class="hljs-built_in">max</span>(ans, dp1[i<span class="hljs-number">-1</span>][j] + dp2[i+<span class="hljs-number">1</span>][j] + dp3[i][j<span class="hljs-number">-1</span>] + dp4[i][j+<span class="hljs-number">1</span>]);<br>                <span class="hljs-comment">// 左-&gt;右 下-&gt;上</span><br>                ans = <span class="hljs-built_in">max</span>(ans, dp1[i][j<span class="hljs-number">-1</span>] + dp2[i][j+<span class="hljs-number">1</span>] + dp3[i+<span class="hljs-number">1</span>][j] + dp4[i<span class="hljs-number">-1</span>][j]);<br>            }<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="ZOJ-3747-Attack-On-Titans"><a href="#ZOJ-3747-Attack-On-Titans" class="headerlink" title="ZOJ 3747 Attack On Titans"></a>ZOJ 3747 Attack On Titans</h5><div class="hljs code-wrapper"><pre><code>给n个士兵排队，每个士兵三种G、R、P可选，求至少有m个连续G士兵，最多有k个连续R士兵的排列的种数。</code></pre></div><p>至少转成至多比较简单<br>至少K个 &lt;==&gt; 至多无穷个 - 至多K-1个</p><p>枚举考虑第i个是G\R\P的三种情况，考虑至多，减去不符合条件的情况数。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e6</span>+<span class="hljs-number">100</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-comment">// G R P</span><br><span class="hljs-comment">// G 至少M个连续</span><br><span class="hljs-comment">// R 至多K个连续</span><br><span class="hljs-comment">// 都转化为至多连续问题， 至多N - 至多M-1</span><br>ll dp[MAXN][<span class="hljs-number">3</span>];<br>ll N, M, K;<br><br><span class="hljs-comment">// 计算至多u个G，至多v个R的方案数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>{<br>    <span class="hljs-comment">// memset(dp, 0, sizeof(dp));</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; ++i) {<br>        ll sum = (dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>]) % MOD ;<br>        dp[i][<span class="hljs-number">2</span>] = sum;<br>        <span class="hljs-keyword">if</span> (i &lt;= u)<br>            dp[i][<span class="hljs-number">0</span>] = sum;<br>        <span class="hljs-keyword">else</span><br>            dp[i][<span class="hljs-number">0</span>] = (sum - dp[i - u - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - dp[i - u - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>]) % MOD;  <span class="hljs-comment">//合并了当i==u+1情况</span><br><br>        <span class="hljs-keyword">if</span> (i &lt;= v)<br>            dp[i][<span class="hljs-number">1</span>] = sum;<br>        <span class="hljs-keyword">else</span><br>            dp[i][<span class="hljs-number">1</span>] = (sum - dp[i - v - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - dp[i - v - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>]) % MOD;<br><br>    }<br>    <span class="hljs-keyword">return</span> (dp[N][<span class="hljs-number">0</span>] + dp[N][<span class="hljs-number">1</span>] + dp[N][<span class="hljs-number">2</span>]) % MOD;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; N &gt;&gt; M &gt;&gt; K) {<br>        cout &lt;&lt; ((<span class="hljs-built_in">calc</span>(N, K) - <span class="hljs-built_in">calc</span>(M - <span class="hljs-number">1</span>, K)) % MOD + MOD) % MOD &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="UVA-10328-Coin-Toss"><a href="#UVA-10328-Coin-Toss" class="headerlink" title="UVA 10328 Coin Toss"></a>UVA 10328 Coin Toss</h5><div class="hljs code-wrapper"><pre><code>n张牌，求至少连续K张正面朝上的方案数。</code></pre></div><p>类似上题，注意k-1可能是0，则初始化可能会改变。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 0 正面</span><br><span class="hljs-comment">// 1 反面</span><br><span class="hljs-keyword">int</span> dp[MAXN][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> K, N;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>{<br>    <span class="hljs-comment">// if (u == 0) return 1;</span><br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dp));<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = u != <span class="hljs-number">0</span>;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; ++i) {<br>        <span class="hljs-keyword">int</span> sum = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>        dp[i][<span class="hljs-number">1</span>] = sum;<br><br>        <span class="hljs-keyword">if</span> (i &lt; u) {<br>            dp[i][<span class="hljs-number">0</span>] = sum;<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == u) {<br>            dp[i][<span class="hljs-number">0</span>] = sum - <span class="hljs-number">1</span>;<br>        } <span class="hljs-keyword">else</span> {<br>            dp[i][<span class="hljs-number">0</span>] = sum - dp[i - u - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> dp[N - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + dp[N - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; N &gt;&gt; K) {<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>            b *= <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// cout &lt;&lt; calc(N) &lt;&lt; endl;</span><br>        <span class="hljs-comment">// cout &lt;&lt; calc(K - 1) &lt;&lt; endl;</span><br>        cout &lt;&lt; b - <span class="hljs-built_in">calc</span>(K - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="HDU-4747-Mex"><a href="#HDU-4747-Mex" class="headerlink" title="HDU 4747 Mex"></a>HDU 4747 Mex</h5><div class="hljs code-wrapper"><pre><code>给定非负整数序列{a_i},定义函数mex(L,R)为在[a_L, a_R]中未出现过的最小非负整数，计算所有mex(L,R)的和(1&lt;=L&lt;=R&lt;=N).(1 &lt;= n &lt;= 200000, 0 &lt;= ai &lt;= 10^9)</code></pre></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> a[MAXN];<br><span class="hljs-keyword">int</span> pos[MAXN];<br><span class="hljs-keyword">int</span> full[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>((cin &gt;&gt; n) &amp;&amp; n) {<br>        <span class="hljs-keyword">int</span> i, j;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {<br>            cin &gt;&gt; a[i];<br>        }<br>        <span class="hljs-built_in">memset</span>(pos, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pos));<br>        <span class="hljs-built_in">memset</span>(full, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(full));<br>        <span class="hljs-keyword">int</span> last;<br><br>        ll tt = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; ++i) {<br>            <span class="hljs-keyword">if</span> (a[i] &lt; n) {<br>                last = pos[a[i]];<br>                pos[a[i]] = i;<br>                <span class="hljs-keyword">for</span> (j = a[i]; j &lt; n; ++j) {<br>                    <span class="hljs-keyword">if</span> (j) full[j] = <span class="hljs-built_in">min</span>(full[j - <span class="hljs-number">1</span>], pos[j]);<br>                    <span class="hljs-keyword">else</span> full[j] = i;<br>                    <span class="hljs-keyword">if</span> (full[j] &gt; last)<br>                        tt += full[j] - last;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 后续一定都是else, full[j] &lt;= last</span><br>                        <span class="hljs-keyword">break</span>;<br>                }<br>            }<br><br>            ans += tt;<br>        }<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><p>两种思路：</p><ol><li><p>线段树<br> 等后续复习线段树专题再讨论。</p></li><li><p>递推计数<br> 有点难理解，依次考虑所有以i结尾的区间的$mex(x, i)$的临时和$tt[i]$，其中$x &lt;= i$，最后累加所有$tt$到$ans$即为答案。<br> 考虑如何从$tt[i - 1]$递推$tt[i]$, 当新元素$a[i]$出现时，$a[i]$的上一次出现位置如果是$j(i.e \quad j &lt; i \quad s.t \quad a[j] == a[i])$，则$j$之前的x到i的$mex(x, i)$与之前的一样，因为a[i]之前就出现过了，出现几次没关系，不影响答案。有可能影响答案的区间是$[x, i] (j+1&lt;=x&lt;=i)$。<br> 考虑如何才能影响答案，可能到某个k为止，$mex(x, i-1) = a[i] (j + 1 &lt;= x &lt;= k)$, 这说明从[x, i-1]中0<del>a[i]-1都出现过，而[k+1, i-1]就不满足该条件，则增加a[i]会导致$mex(x, i) (j + 1 &lt;= x &lt;= k)$<strong>至少</strong>从a[i]变成a[i]+1, 因此总的tt<strong>至少</strong>会增加k - j, k是满足[x, i-1]中0</del>a[i]-1都出现过的最大下标，结合考虑a[i]=a[i], 则k是满足[x, i]中0~a[i]都出现过的最大下标，即代码中的full数组。<br> 注意前面的**至少**, 因为有可能a[i]+1在之前出现过, 因此类似地，我们需要不断考虑a[i]+1, a[i]+2, … N - 1, 因为一共N个数，根据鸽巢原理，mex()的值域只能在[0, N], 且当a[i]&gt;=N时，则值域一定为[0, N-1]。</p><p> Ref: [<a href="https://blog.csdn.net/qq1965610770/article/details/80041940]">https://blog.csdn.net/qq1965610770/article/details/80041940]</a></p></li></ol><h5 id="HDU-4489-The-King’s-Ups-and-Downs"><a href="#HDU-4489-The-King’s-Ups-and-Downs" class="headerlink" title="HDU 4489 The King’s Ups and Downs"></a>HDU 4489 The King’s Ups and Downs</h5><div class="hljs code-wrapper"><pre><code>有n个高矮不同的人，求n个人排成一列使得高-矮-高或者矮-高-矮依次排列的种数。</code></pre></div><p>组合DP，设高度分别为1, 2, … n.</p><div class="hljs code-wrapper"><pre><code>(1) 1 (2) 2 ... n-1 (n)(x) 是可插入的位置标号</code></pre></div><p>考虑第n个人，假设前n-1个人已经按照要求排好了，则第n个人有n个位置可放，对于任一位置j，显然第n个人的身高n大于前n-1个人的任何人的身高，所以第n个人左边的j-1个人的排列，必须要满足最后一个人是通过身高下降得到的；右边的n-j个人中，最开始的那个人一定是通过身高升高得到后一个人的。<br>前面的j-1个人有$n-1 \choose j-1$种选择。<br>设状态dp[i][0]表示前面有i个人, 且第一个人通过上升得到第二个人的总排列总数, dp[i][1]表示前面有i个人，且最后一个人是通过下降得到的。<br>由对称性，dp[i][0] = dp[i][1] = sum[i] / 2, 其中sum[i]为i个人总的满足要求的排列数。<br>对于n&gt;=2的情况，高低高和低高低的情况是一样多的，因为对于n为奇数时，任意高低高方案，首尾总有一个高低，将首尾元素的较低者放在对面位置即可构造一个低高低方案；同理，对于任意低高低方案，将首尾元素的较高者放在对面位置即可构造一个高低高方案，且是一一对应（单射+满射）。对于n是偶数，直接将n反转，即可得到一一对应的高低高或者低高低。<br>因为高低高或者低高低覆盖了全部可能，所以各是sum[i] / 2。</p><div class="hljs code-wrapper"><pre><code>n为奇数：    低高低    1 9 2 8 3    3 1 9 2 8    1 9 2 8 3    高低高    9 1 8 2 7    7 9 1 8 2    9 1 8 2 7n为偶数：    1 3 2 4    4 2 3 1</code></pre></div><p>所以第n个人放到位置j，有$ n-1 \choose j-1 $ * dp[j-1][0] * dp[n-j][1]种情况。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">22</span>;<br><br>ll dp[MAXN][<span class="hljs-number">2</span>];<br>ll sum[MAXN];<br><br><span class="hljs-comment">// 求组合数</span><br><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>{<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b; ++i) {<br>        res *= (a - i);<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; ++i) {<br>        res /= i;<br>    }<br>    <span class="hljs-keyword">return</span> res;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-keyword">int</span> P, D, n;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    sum[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">20</span>; ++i) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j) {<br>            sum[i] += dp[j - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] * dp[i - j][<span class="hljs-number">1</span>] * <span class="hljs-built_in">C</span>(i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>);<br>        }<br>        dp[i][<span class="hljs-number">0</span>] = dp[i][<span class="hljs-number">1</span>] = sum[i] / <span class="hljs-number">2</span>;<br>    }<br>    cin &gt;&gt; P;<br>    <span class="hljs-keyword">while</span> (P--) {<br>        cin &gt;&gt; D &gt;&gt; n;<br>        cout &lt;&lt; D &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; sum[n] &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="HDU-4054-Number-String"><a href="#HDU-4054-Number-String" class="headerlink" title="HDU 4054 Number String"></a>HDU 4054 Number String</h5><div class="hljs code-wrapper"><pre><code>给一个只含‘I','D','?'三种字符的字符串，I表示当前数字大于前面的数字，D表示当前的数字小于前面一位的数字，?表示当前位既可以小于又可以大于。问1~n的排列中有多少个满足该字符串。</code></pre></div><p>TODO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;动态规划(Dynamic Programming, DP)。&lt;/p&gt;
&lt;h2 id=&quot;DP总结&quot;&gt;&lt;a href=&quot;#DP总结&quot; class=&quot;headerlink&quot; title=&quot;DP总结&quot;&gt;&lt;/a&gt;DP总结&lt;/h2&gt;&lt;h3 id=&quot;动态规划分类&quot;&gt;&lt;a href=&quot;#动</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第K大的数 (二分答案, 笛卡尔乘积第K大)</title>
    <link href="https://sonack.com/2018/11/23/d1edbf62b407/"/>
    <id>https://sonack.com/2018/11/23/d1edbf62b407/</id>
    <published>2018-11-23T11:22:53.000Z</published>
    <updated>2021-12-07T18:10:39.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数组A和数组B，里面都有n个整数。数组C共有n^2个整数，分别是A[0] * B[0],A[0] * B[1] … A[1] * B[0], A[1] * B[1] … A[n - 1] * B[n - 1]（数组A同数组B的组合）。求数组C中第K大的数。例如：A：1 2 3，B：2 3 4。A与B组合成的C包括2 3 4 4 6 8 6 9 12共9个数。</p></blockquote><hr><p>对A和B排序，再二分答案，利用单调性，可以在O(n)内求出有多少个数比当前答案大。</p><p>第K大的数，即有K-1个数比它大，定义函数judge(x)判断有多少个数比x大，第一个不满足judge(x)&gt;=K的x，即是第K大的数。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">5e4</span>;<br><span class="hljs-keyword">int</span> n, K;<br>LL a[maxn+<span class="hljs-number">10</span>], b[maxn+<span class="hljs-number">10</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(LL x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = n - <span class="hljs-number">1</span>; i &lt; n; i++)<br>    {<br>        <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[i] * b[j] &gt; x; j--);<br>        cnt += n - <span class="hljs-number">1</span> - j;<br>    }<br>    <span class="hljs-keyword">return</span> cnt;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;n, &amp;K);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld%lld"</span>, &amp;a[i], &amp;b[i]);<br>    <span class="hljs-built_in">sort</span>(a, a+n);<br>    <span class="hljs-built_in">sort</span>(b, b+n);<br>    LL l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1e18</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    {<br>        LL m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(m) &gt;= K)<br>            l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            r = m;<br>    }<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;数组A和数组B，里面都有n个整数。数组C共有n^2个整数，分别是A[0] * B[0],A[0] * B[1] … A[1] * B[0], A[1] * B[1] … A[n - 1] * B[n - 1]（数组A同数组B的组合）。求数组C中第K</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>POJ 3111 K Best (二分答案, 平均值最大化)</title>
    <link href="https://sonack.com/2018/11/23/b5bd8ccf1192/"/>
    <id>https://sonack.com/2018/11/23/b5bd8ccf1192/</id>
    <published>2018-11-23T11:06:25.000Z</published>
    <updated>2018-11-26T12:46:16.870Z</updated>
    
    <content type="html"><![CDATA[<p>POJ 3111</p><p>题意：</p><blockquote><p>n件珠宝，每件价值v_i, 重w_i, 希望保留K件，使得单位重量的价值最大。</p></blockquote><span id="more"></span><hr><p>直接按照价值重量密度贪心不可，因为各件珠宝的密度所占的比重不同（重量大的，密度也占的比重大），可以二分答案，判断是否存在某种划分，使得单位重量价值&gt;=x，即Σ(vi-wi*x)&gt;=0, 贪心选择前K大的即可判断。二分答案，浮点数二分，求得最大的x，满足单位重量&gt;=x。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">int</span> N, K;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">jewels</span></span><br><span class="hljs-class">{</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-keyword">int</span> w;<br>    <span class="hljs-keyword">double</span> comp_key;<br>}J[<span class="hljs-number">100010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> jewels &amp;l, <span class="hljs-keyword">const</span> jewels &amp;r)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">return</span> l.comp_key &gt; r.comp_key;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        J[i].comp_key = J[i].v - J[i].w * x;<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(J, J + N, cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; K; i++)<br>        sum += J[i].comp_key;<br>    <span class="hljs-keyword">return</span> sum &gt;= <span class="hljs-number">0</span>;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;N, &amp;K);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    {   <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;J[i].v, &amp;J[i].w);<br>        J[i].id = i+<span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">double</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1e8</span>;<br>    <span class="hljs-comment">// (r-l)/2^100的精度足够 可行范围[l,r)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>    {<br>        <span class="hljs-keyword">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(mid))<br>        {<br>            l = mid;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            r = mid;<br>        }<br>    }<br><br>    <span class="hljs-comment">// printf ("%.2f\n", l);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; K; i++)<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d%c"</span>, J[i].id, i &lt; K - <span class="hljs-number">1</span> ? <span class="hljs-string">' '</span> : <span class="hljs-string">'\n'</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;POJ 3111&lt;/p&gt;
&lt;p&gt;题意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;n件珠宝，每件价值v_i, 重w_i, 希望保留K件，使得单位重量的价值最大。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>贪心法总结</title>
    <link href="https://sonack.com/2018/11/23/a86c0bd5a2c4/"/>
    <id>https://sonack.com/2018/11/23/a86c0bd5a2c4/</id>
    <published>2018-11-23T08:33:55.000Z</published>
    <updated>2018-11-26T09:12:51.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="贪心法总结"><a href="#贪心法总结" class="headerlink" title="贪心法总结"></a>贪心法总结</h2><span id="more"></span><hr><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>在多阶段决策问题中，总是“短视”地做出当前环境下最好的决策（局部最优选择），希望最终整体结果也较优，某些特殊的问题经过证明可以得出贪心结果最终也可能是整体最优解。</p><p>一个贪心问题需要有以下要素：</p><ol><li><p>贪心选择性质：这是与DP的不同，一系列局部最优的贪心选择，每做一次贪心选择，就将原问题简化为规模更小的子问题，继而再进行贪心选择。如果对于一个具体问题，可以证明每一步所做的贪心选择最终会导向问题的整体最优解，则问题具有贪心选择性质。</p></li><li><p>最优子结构性质：整个问题的最优解包含子问题的最优解，可以用反证法证明，DP算法也要求此性质。</p></li></ol><h3 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h3><h4 id="活动时间安排问题"><a href="#活动时间安排问题" class="headerlink" title="活动时间安排问题"></a>活动时间安排问题</h4><blockquote><p>若干个区间[s_i,t_i], 选择尽可能多的不交叉重叠的区间，数量最多为多少<br>贪心选择结束时间更早的活动，因为可以给后续活动留下更多空间，至少不会比最优解差。</p></blockquote><p>submit: [<a href="http://www.51nod.com/Challenge/Problem.html#!#problemId=1428]">http://www.51nod.com/Challenge/Problem.html#!#problemId=1428]</a></p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">act</span></span><br><span class="hljs-class">{</span><br>    <span class="hljs-keyword">int</span> begin, end;<br>}t[<span class="hljs-number">10010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(act &amp;l, act &amp;r)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">return</span> (l.end &lt; r.end) || (l.end == r.end &amp;&amp; l.begin &lt; r.begin);<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;t[i].begin, &amp;t[i].end);<br>    <span class="hljs-built_in">sort</span>(t, t+N, cmp);<br>    <span class="hljs-keyword">int</span> last_time = <span class="hljs-number">-1</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    {<br>        <span class="hljs-keyword">if</span> (t[i].begin &gt;= last_time)<br>        {<br>            ans++;<br>            last_time = t[i].end;<br>        }<br>    }<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d\n"</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h4 id="区间覆盖问题"><a href="#区间覆盖问题" class="headerlink" title="区间覆盖问题"></a>区间覆盖问题</h4><p>POJ 3069</p><blockquote><p>直线上有N个点，{ Xi | i=1…N }，选择若干个加上标记，每个标记可以覆盖距离为R的区域，希望为尽可能少的点添加标记，问至少要标记多少个点？</p></blockquote><p>从最左边的点开始考虑，保证能覆盖它，且尽可能右移的点被标记，再找到第一个没被覆盖的点，用同样的贪心策略求解。</p><h4 id="NYOJ-1170-最大的数"><a href="#NYOJ-1170-最大的数" class="headerlink" title="NYOJ 1170 最大的数"></a>NYOJ 1170 最大的数</h4><blockquote><p>n个数，在n-1个间隔中间添加+号或者*号，可以任意添加括号，但不许改变相对顺序，使结果最大。</p></blockquote><p>不难发现，如果没有1，乘法一定比加法大。如果有1，则应该选择将1加在左边还是加在右边，a 1 b, (a+1)*b与a*(1+b)相比，发现应该把1加在较小的一侧。但是当a==b时，如何选择？由 4 1 4 1 的最优方案是 (4+1)*(4+1)，应该优先加在左边。当a值比较小时，该规律并不适用，比如 2 1 1 2的最优方案时(2+1)*(1+2)=9，而不是(2 * (1 + 1) * 2)=8，因此特殊情况需要判断，即 2 1 1 时，应该把中间的1加在左边的2，而不是右边较小的1，且(2+1)+1=4=2*(1+1)，每次把1加上后，原来的1相当于消失，最后累乘所有元素即是最大的结果。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MOD 10086 </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, a[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N))<br>    {<br>        a[<span class="hljs-number">0</span>] = a[N+<span class="hljs-number">1</span>] = <span class="hljs-number">21</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);<br>        <span class="hljs-keyword">if</span> (N &gt; <span class="hljs-number">1</span>)<br>        {<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>            {<br>                <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">1</span>)<br>                {<br>                    <span class="hljs-comment">// 1 加在左边</span><br>                    <span class="hljs-keyword">if</span>(a[i<span class="hljs-number">-1</span>] &lt;= a[i+<span class="hljs-number">1</span>] || (a[i<span class="hljs-number">-1</span>] == <span class="hljs-number">2</span> &amp;&amp; a[i+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>))<br>                    {<br>                        a[i] += a[i<span class="hljs-number">-1</span>];<br>                        a[i<span class="hljs-number">-1</span>] = <span class="hljs-number">1</span>;<br>                    } <span class="hljs-comment">// 1 加在右边</span><br>                    <span class="hljs-keyword">else</span><br>                    {<br>                        a[i+<span class="hljs-number">1</span>] += a[i];<br>                        i++;<br>                    }<br>                }<br>            }<br>        }<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>            a[<span class="hljs-number">1</span>] = (a[<span class="hljs-number">1</span>] * a[i]) % MOD;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, a[<span class="hljs-number">1</span>]);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h4 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h4><blockquote><p>现在有n堆果子，第i堆有ai个果子。现在要把这些果子合并成一堆，每次合并的代价是两堆果子的总果子数。求合并所有果子的最小代价。</p></blockquote><p>类似于哈夫曼编码，贪心合并最少的两堆果子，可以用优先队列或堆进行优化，时间复杂度为O(nlogn).</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">// 洛谷 P1090 https://www.luogu.org/problemnew/show/P1090</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-comment">// #include &lt;bits/stdc++.h&gt;</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">int</span> fruits[MAXN + <span class="hljs-number">10</span>];<br>priority_queue&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; Q;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-keyword">int</span> T, N, tmp1, tmp2;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    T = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        LL ans = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; N;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>        {<br>            cin &gt;&gt; fruits[i];<br>            Q.<span class="hljs-built_in">push</span>(fruits[i]);<br>        }<br>        <span class="hljs-built_in">sort</span>(fruits, fruits + N);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N - <span class="hljs-number">1</span>; ++i) {<br>            tmp1 = Q.<span class="hljs-built_in">top</span>(); Q.<span class="hljs-built_in">pop</span>();<br>            tmp2 = Q.<span class="hljs-built_in">top</span>(); Q.<span class="hljs-built_in">pop</span>();<br>            ans += (tmp1 + tmp2);<br>            Q.<span class="hljs-built_in">push</span>(tmp1 + tmp2);<br>        }<br>        <span class="hljs-comment">// for (int i = 0; i &lt; N - 1; ++i) {</span><br>        <span class="hljs-comment">//     LL tmp = (fruits[i + 1] += fruits[i]);</span><br>        <span class="hljs-comment">//     ans += tmp;</span><br>        <span class="hljs-comment">//     int j;</span><br>        <span class="hljs-comment">//     for (j = i + 2; j &lt; N &amp;&amp; fruits[j] &lt; tmp; ++j) {</span><br>        <span class="hljs-comment">//         fruits[j - 1] = fruits[j];</span><br>        <span class="hljs-comment">//     }</span><br>        <span class="hljs-comment">//     fruits[j - 1] = tmp;</span><br>        <span class="hljs-comment">// }</span><br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;贪心法总结&quot;&gt;&lt;a href=&quot;#贪心法总结&quot; class=&quot;headerlink&quot; title=&quot;贪心法总结&quot;&gt;&lt;/a&gt;贪心法总结&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>二分法总结</title>
    <link href="https://sonack.com/2018/11/22/ea9b9ec92520/"/>
    <id>https://sonack.com/2018/11/22/ea9b9ec92520/</id>
    <published>2018-11-22T07:43:49.000Z</published>
    <updated>2018-11-26T08:46:40.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分法总结"><a href="#二分法总结" class="headerlink" title="二分法总结"></a>二分法总结</h2><span id="more"></span><hr><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>有序数组a(a[0], … a[N-1]), 查找目标值target，维护一个target所在区间[l, r), 每次与中间元素a[m]比较(m=floor((l + r) / 2))，确定target所在区间，且区间长度缩减一半，依次进行，最终在长度为N的数组a中查找target值总共需要<strong>O(logN)<strong>时间复杂度，空间复杂度为</strong>O(1)</strong>.</p><h4 id="C-STL-APIs-Usage"><a href="#C-STL-APIs-Usage" class="headerlink" title="C++ STL APIs Usage"></a>C++ STL APIs Usage</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">// lower_bound/upper_bound example</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span>     <span class="hljs-comment">// std::cout</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span>    <span class="hljs-comment">// std::lower_bound, std::upper_bound, std::sort</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span>       <span class="hljs-comment">// std::vector</span></span><br><br><span class="hljs-comment">// lower_bound 第一个i, a[i] &gt;= t</span><br><span class="hljs-comment">// upper_bound 第一个i, a[i] &gt; t</span><br><span class="hljs-comment">// [lower_bound, upper_bound) </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>{<br>  <span class="hljs-keyword">int</span> myints[] = {<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>};<br>  <span class="hljs-function">std::vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(myints,myints+<span class="hljs-number">8</span>)</span></span>;           <span class="hljs-comment">// 10 20 30 30 20 10 10 20</span><br><br>  std::<span class="hljs-built_in">sort</span> (v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());                <span class="hljs-comment">// 10 10 10 20 20 20 30 30</span><br><br>  std::vector&lt;<span class="hljs-keyword">int</span>&gt;::iterator low,up;<br>  low=std::<span class="hljs-built_in">lower_bound</span> (v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">20</span>);<br>  up=std::<span class="hljs-built_in">upper_bound</span> (v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">20</span>);<br>  std::cout &lt;&lt; <span class="hljs-string">"lower_bound at position "</span> &lt;&lt; (low- v.<span class="hljs-built_in">begin</span>()) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>  std::cout &lt;&lt; <span class="hljs-string">"upper_bound at position "</span> &lt;&lt; (up - v.<span class="hljs-built_in">begin</span>()) &lt;&lt; <span class="hljs-string">'\n'</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h4 id="C-STL-APIs-python-implementations"><a href="#C-STL-APIs-python-implementations" class="headerlink" title="C++ STL APIs python implementations"></a>C++ STL APIs python implementations</h4><p>ref: [<a href="https://www.zhihu.com/question/3613238]">https://www.zhihu.com/question/3613238]</a></p><p>C++ STL <em>lower_bound()</em> python implementation:</p><figure class="highlight python"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ie. find the smallest i such that a[i] &gt;= value</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lower_bound</span>(<span class="hljs-params">array, first, last, value</span>):</span><br>    <span class="hljs-keyword">while</span> (first &lt; last):<br>        <span class="hljs-comment"># mid = first + ((last - first) &gt;&gt; 1)  注意&gt;&gt;优先级最低，需要加括号</span><br>        <span class="hljs-comment"># 不用(first + last) // 2 防止溢出</span><br>        mid = first + (last - first) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> (array[mid] &lt; value):<br>            first = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            last = mid<br>    <span class="hljs-keyword">return</span> first<br></code></pre></div></td></tr></tbody></table></figure><p>C++ STL <em>upper_bound()</em> python implementation:</p><figure class="highlight python"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ie. find the smallest i such that a[i] &gt; value</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upper_bound</span>(<span class="hljs-params">array, first, last, value</span>):</span><br>    <span class="hljs-keyword">while</span> (first &lt; last):<br>        mid = first + (last - first) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 此处看做条件c</span><br>        <span class="hljs-keyword">if</span> (array[mid] &lt;= value):<br>            first = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            last = mid<br>    <span class="hljs-keyword">return</span> first<br></code></pre></div></td></tr></tbody></table></figure><h4 id="C-STL-APIs-C-implementations"><a href="#C-STL-APIs-C-implementations" class="headerlink" title="C++ STL APIs C++ implementations"></a>C++ STL APIs C++ implementations</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lower_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> T)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>, r=N;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (A[m] &lt; T)<br>            l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            r = m;<br>    }<br>    <span class="hljs-keyword">return</span> l;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">upper_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> T)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>, r=N;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (A[m] &lt;= T)  <span class="hljs-comment">// 只有此处不同</span><br>            l = m + <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">else</span><br>            r = m;<br>    }<br>    <span class="hljs-keyword">return</span> l;<br>}<br><br><span class="hljs-comment">// [l,r] 区间写法</span><br><span class="hljs-comment">// return the first element which &gt;= x</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LowerBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">//注意right初始化为n-1</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">right</span><span class="hljs-params">(n<span class="hljs-number">-1</span>)</span>, mid</span>;<br>    <span class="hljs-keyword">while</span>(left &lt;= right)  <span class="hljs-comment">// 注意结束判别条件，l&lt;=r 而不是 l&lt;r</span><br>    {<br>        mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid] &lt; x)<br>        {<br>            left = mid + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            right = mid - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 注意 -1</span><br>        }<br>    }<br>    <span class="hljs-keyword">return</span> left;  <span class="hljs-comment">// left和right不一致，注意要返回left</span><br>}<br><br><span class="hljs-comment">// return first element which &gt; x</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">UpperBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">right</span><span class="hljs-params">(n<span class="hljs-number">-1</span>)</span>, mid</span>;<br>    <span class="hljs-keyword">while</span>(left &lt;= right)<br>    {<br>        mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid] &lt;= x)<br>        {<br>            left = mid + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            right = mid - <span class="hljs-number">1</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> left;<br>}<br><br><br><br><br></code></pre></div></td></tr></tbody></table></figure><p><strong>总结：</strong></p><ol><li>无论是<em>lower_bound()<em>还是</em>upper_bound()</em>, 都是返回不满足条件c的最小下标；</li><li>return first or last是等价的;</li><li>区间表示法为[first, last)。</li></ol><h3 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h3><p>如果一个问题的解是离散的，且范围已知（ie 可以枚举），且判断一个解是否可行的代价较低，且答案具有单调性(ie 如果x是解，则x+i也是解， 如果x不是解，则x-i也不是解（或者反过来）。即满足条件和不满足条件的交界面只有一个，类似于判断条件C，array[i]&lt;value的条件在有序数组内即满足单调性)，则可以采用二分答案的做法来求解。</p><h3 id="例题s"><a href="#例题s" class="headerlink" title="例题s"></a>例题s</h3><h4 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h4><p>题目列表Ref: [<a href="https://blog.csdn.net/linhuanmars/article/details/31354941]">https://blog.csdn.net/linhuanmars/article/details/31354941]</a></p><h5 id="Leetcode-35-Search-Insert-Position"><a href="#Leetcode-35-Search-Insert-Position" class="headerlink" title="Leetcode 35. Search Insert Position"></a>Leetcode 35. Search Insert Position</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">// method 1</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>{<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>, r=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(l&lt;=r) <br>    {<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; target) l = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = mid<span class="hljs-number">-1</span>;<br>    }<br>    <span class="hljs-keyword">return</span> l;<br>}<br><br><span class="hljs-comment">// method 2 lower_bound</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>{<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[m] &lt; target)<br>            l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            r = m;<br>    }<br>    <span class="hljs-keyword">return</span> l;<br>}<br><br><span class="hljs-comment">// method 3 upper_bound</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>{<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-comment">//         the 1st to not obby nums[i] &lt; target, ie nums[i] &gt; target</span><br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[m] &lt;= target)<br>            l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            r = m;<br>    }<br>    <span class="hljs-comment">// 如果找到了则返回下标l-1, 没找到的话插入位置则是l</span><br>    <span class="hljs-keyword">if</span> (l &amp;&amp; nums[l<span class="hljs-number">-1</span>] == target) l--;<br>    <span class="hljs-keyword">return</span> l;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="Leetcode-Search-for-a-Range"><a href="#Leetcode-Search-for-a-Range" class="headerlink" title="Leetcode ?. Search for a Range"></a>Leetcode ?. Search for a Range</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lower_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> T)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>, r=N;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (A[m] &lt; T)<br>            l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            r = m;<br>    }<br>    <span class="hljs-keyword">return</span> l;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">upper_bound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *A, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> T)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>, r=N;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (A[m] &lt;= T)<br>            l = m + <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">else</span><br>            r = m;<br>    }<br>    <span class="hljs-keyword">return</span> l;<br>}<br><br><br><span class="hljs-comment">// return the first element which &gt;= x</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LowerBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">right</span><span class="hljs-params">(n<span class="hljs-number">-1</span>)</span>, mid</span>;<br>    <span class="hljs-keyword">while</span>(left &lt;= right){<br>        mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid] &lt; x){<br>            left = mid + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">else</span>{<br>            right = mid - <span class="hljs-number">1</span>;<br>        }<br>    }<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">"l=%d, r=%d"</span>,left, right);<br><br>    <span class="hljs-keyword">return</span> left;<br>}<br> <br><span class="hljs-comment">// return first element which &gt; x</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">UpperBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">left</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span>, <span class="hljs-title">right</span><span class="hljs-params">(n<span class="hljs-number">-1</span>)</span>, mid</span>;<br>    <span class="hljs-keyword">while</span>(left &lt;= right){<br>        mid = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid] &lt;= x){<br>            left = mid + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">else</span>{<br>            right = mid - <span class="hljs-number">1</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> left;<br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">100</span>],N,T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;N, &amp;T);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>    {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);<br>    }<br>    <span class="hljs-built_in">sort</span>(a,a+N);<br><br>    <span class="hljs-comment">// int lb = lower_bound(a, N, T);</span><br>    <span class="hljs-comment">// int ub = upper_bound(a, N, T);</span><br><br>    <span class="hljs-keyword">int</span> lb = <span class="hljs-built_in">LowerBound</span>(a, N, T);<br>    <span class="hljs-keyword">int</span> ub = <span class="hljs-built_in">UpperBound</span>(a, N, T);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d-%d\n"</span>, lb, ub);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="Leetcode-69-Sqrt-x"><a href="#Leetcode-69-Sqrt-x" class="headerlink" title="Leetcode 69. Sqrt(x)"></a>Leetcode 69. Sqrt(x)</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 如果采用[l,r)写法，则r可能会溢出有符号整数的范围</span><br>    <span class="hljs-comment">// 采用[l,r]写法</span><br>    <span class="hljs-comment">// 找到第一个满足m&gt;x/m的m，ie m**2&gt;x的值，</span><br>    <span class="hljs-comment">// 则m-1就是平方&lt;=x的最大整数，即sqrt(x)的整数部分。</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = x;<br>        <span class="hljs-keyword">while</span>(l&lt;=r)<br>        {<br>            <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (m&lt;=x/m)<br>                l = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                r = m - <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">return</span> l<span class="hljs-number">-1</span>;<br>    }<br>    <br>    <span class="hljs-comment">// [l,r)写法，采用了unsigned int防止溢出 </span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = x+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        {<br>            <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (m&lt;=x/m)<br>                l = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                r = m;<br>        }<br>        <span class="hljs-keyword">return</span> l<span class="hljs-number">-1</span>;<br>    }<br>};<br></code></pre></div></td></tr></tbody></table></figure><p><strong>Notes</strong>:</p><ol><li>注意m&lt;=x/m的写法，替代了m*m&lt;=x的写法，防止溢出。</li></ol><h5 id="Leetcode-74-Search-a-2D-Matrix"><a href="#Leetcode-74-Search-a-2D-Matrix" class="headerlink" title="Leetcode 74. Search a 2D Matrix"></a>Leetcode 74. Search a 2D Matrix</h5><p>首先找到第一个元素matrix[i][0]&lt;=target的行i，再在matrix[i]内二分查找target值。时间复杂度为O(logn+logn), ie O(logn).</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix, <span class="hljs-keyword">int</span> target)</span> </span>{<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 一旦有空行，则返回false</span><br>        <span class="hljs-comment">// []</span><br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// [[]]</span><br>        <span class="hljs-keyword">if</span>(matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-comment">// [l,r), 查找第一个首元素&gt;target的行</span><br>        <span class="hljs-keyword">while</span> (l &lt; r)<br>        {<br>            <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (matrix[m][<span class="hljs-number">0</span>] &lt;= target)<br>                l = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                r = m;<br>        }<br>        <span class="hljs-comment">// select 即为最后一个 &lt;= target的行</span><br>        <span class="hljs-keyword">int</span> select = l - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 第一行的首元素都＞target，肯定不存在</span><br>        <span class="hljs-keyword">if</span> (select &lt; <span class="hljs-number">0</span>)<br>        {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-comment">// [l,r]</span><br>        l = <span class="hljs-number">0</span>, r = matrix[select].<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r)<br>        {<br>            <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br><br>            <span class="hljs-keyword">if</span> (matrix[select][m] &lt; target)<br>                l = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[select][m] &gt; target)<br>                r = m - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    }<br>};<br></code></pre></div></td></tr></tbody></table></figure><h5 id="Leetcode-33-Search-in-Rotated-Sorted-Array"><a href="#Leetcode-33-Search-in-Rotated-Sorted-Array" class="headerlink" title="Leetcode 33. Search in Rotated Sorted Array"></a>Leetcode 33. Search in Rotated Sorted Array</h5><p>因为没有重复元素，所以原始数组一定严格单调递增。<br>可以根据a[m]与a[r]的大小关系，判断单调部分是[l,m]还是[m,r]（两者必然存在一个单调，因为断点只有一个，根据鸽巢定理)，再根据情况进行二分即可。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span><br><span class="hljs-keyword">public</span>:   <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>{<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">// [l,r]</span><br>        <span class="hljs-keyword">while</span> (l&lt;=r)<br>        {<br>            <span class="hljs-keyword">int</span> m = (l + r) / <span class="hljs-number">2</span>; <br>            <span class="hljs-comment">// 直接找到</span><br>            <span class="hljs-keyword">if</span> (nums[m] == target) <span class="hljs-keyword">return</span> m;<br>            <span class="hljs-comment">// [m,r]一定单调</span><br>            <span class="hljs-keyword">if</span> (nums[m] &lt; nums[r])<br>            {<br>                <span class="hljs-comment">// 判断是否在右侧</span><br>                <span class="hljs-keyword">if</span> (nums[m] &lt; target &amp;&amp; nums[r] &gt;= target)<br>                    l = m+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    r = m<span class="hljs-number">-1</span>;<br>            } <span class="hljs-comment">// nums[m] &gt; nums[r], 断点在右侧，左侧[l,m]一定单调</span><br>            <span class="hljs-keyword">else</span><br>            {<br>                <span class="hljs-comment">// 判断target是否在左侧</span><br>                <span class="hljs-keyword">if</span> (nums[l] &lt;= target &amp;&amp; nums[m] &gt; target)<br>                    r = m<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-comment">// 否则在右侧</span><br>                    l = m+<span class="hljs-number">1</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br>};<br></code></pre></div></td></tr></tbody></table></figure><h5 id="Leetcode-81-Search-in-Rotated-Sorted-Array-II"><a href="#Leetcode-81-Search-in-Rotated-Sorted-Array-II" class="headerlink" title="Leetcode 81. Search in Rotated Sorted Array II"></a>Leetcode 81. Search in Rotated Sorted Array II</h5><p>有重复元素，可能只是非递减序列，无法再根据a[m]和a[r]的大小关系判断非递减部分，eg [2 2 2 2 2 3] rotate to [2 3 | 2 2 2 2] (a[m]=2=a[r],断点在左侧，右侧非递减) 或者 rotate to [2 2 2 2 3 | 2] (a[m]=2=a[r], 断点在右侧，左侧非递减)，但是当a[m]&lt;a[r]时，还是可以判断出来断点一定在左边的，因为在右边的话，只能有a[m]&gt;=a[r]，同理当a[m]&gt;a[r]时，单调区间为[l,m].如果a[m]与a[r]相等，则r–，因为无法判断，且a[r]!=target(a[m]!=target已经判断过了)肯定不是答案，缩减问题规模1个单位，最坏时间复杂度为O(n).</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>{<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r)<br>        {<br>            <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[m] == target)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (nums[m] &lt; nums[r])<br>            {<br>                <span class="hljs-keyword">if</span> (nums[m] &lt; target &amp;&amp; target &lt;= nums[r])<br>                    l = m + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    r = m - <span class="hljs-number">1</span>;<br>            }<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[m] &gt; nums[r])<br>            {<br>                <span class="hljs-keyword">if</span> (nums[l] &lt;= target &amp;&amp; target &lt; nums[m])<br>                    r = m - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    l = m + <span class="hljs-number">1</span>;<br>            }<br>            <span class="hljs-keyword">else</span><br>            {<br>                r--;<br>            }<br>            <br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    }<br><br></code></pre></div></td></tr></tbody></table></figure><h5 id="洛谷-P1024-一元三次方程求解"><a href="#洛谷-P1024-一元三次方程求解" class="headerlink" title="洛谷 P1024 一元三次方程求解"></a>洛谷 P1024 一元三次方程求解</h5><p>已知根与根之间距离&gt;=1，因此只要用长度为1的区间去二分求解即可，注意区间端点重叠可能会重复答案，因此在挪动区间时需要加一个小eps防止答案在端点处被求解两次。也可以根据答案求解情况挪动区间。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-4</span>;<br><span class="hljs-keyword">double</span> interval_width = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">double</span> A,B,C,D;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">return</span> A*x*x*x+B*x*x+C*x+D;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_ans</span><span class="hljs-params">(<span class="hljs-keyword">double</span> l, <span class="hljs-keyword">double</span> r)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// printf("(l=%lf, r=%lf)", l,r);</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(l) * <span class="hljs-built_in">f</span>(r) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">9999</span>;<br>    <span class="hljs-keyword">while</span>(r-l&gt;eps)<br>    {<br>        <span class="hljs-keyword">double</span> m = (l+r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(m) * <span class="hljs-built_in">f</span>(l) &lt;=<span class="hljs-number">0</span>)<br>            r = m;<br>        <span class="hljs-keyword">else</span><br>            l = m;<br>    }<br>    <span class="hljs-keyword">return</span> (l+r)/<span class="hljs-number">2</span>;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    vector&lt;<span class="hljs-keyword">double</span>&gt; ans;<br>    <span class="hljs-keyword">double</span> l = <span class="hljs-number">-100</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf%lf%lf%lf"</span>, &amp;A, &amp;B, &amp;C, &amp;D);<br>    <span class="hljs-keyword">while</span>(l&lt;<span class="hljs-number">100</span>)<br>    {<br>        <span class="hljs-keyword">double</span> solu = <span class="hljs-built_in">get_ans</span>(l, l+interval_width);<br>        <span class="hljs-keyword">if</span> (solu &lt; <span class="hljs-number">101</span>)<br>        {<br>            ans.<span class="hljs-built_in">push_back</span>(solu);<br>            <span class="hljs-comment">// printf("%.2lf", solu);</span><br>        }<br><br>        l+=interval_width+eps;<br>    }<br><br>    <span class="hljs-built_in">sort</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2f "</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h4 id="二分答案-1"><a href="#二分答案-1" class="headerlink" title="二分答案"></a>二分答案</h4><h5 id="POJ-3258-跳石头-River-Hopscotch"><a href="#POJ-3258-跳石头-River-Hopscotch" class="headerlink" title="POJ 3258 跳石头 River Hopscotch"></a>POJ 3258 跳石头 River Hopscotch</h5><p>最短跳跃距离最大–最小值最大问题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> L, m, n;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">50010</span>];<br><span class="hljs-comment">// 判断最短距离不少于x是否可以达到</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> moves = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>    {<br>        <span class="hljs-keyword">if</span> (a[i+<span class="hljs-number">1</span>] - last &lt; x) <span class="hljs-comment">// 太近了，需要搬石头</span><br>        {<br>            moves++;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            last = a[i+<span class="hljs-number">1</span>];<br>        }<br>    }<br>    <span class="hljs-keyword">if</span> (moves &gt; m)<br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>, &amp;L, &amp;n, &amp;m);<br>    a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);<br>    a[n+<span class="hljs-number">1</span>] = L;<br>    <span class="hljs-built_in">sort</span>(a, a+n+<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = L + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 第一个不满足check(m)的m值，即第一个不能达到最短距离&gt;=m的m，即第一个无法使所有最短距离都&gt;=m的m,则m-1就是最大的最小值</span><br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// printf ("%d,%d,%d\n", l, r, m);</span><br>        <span class="hljs-comment">// 最短距离&gt;=m可以达到</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(m))<br>        {<br>            l = m + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            r = m;<br>        }<br>    }<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d"</span>, l - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="洛谷-P1182-数列分段"><a href="#洛谷-P1182-数列分段" class="headerlink" title="洛谷 P1182 数列分段"></a>洛谷 P1182 数列分段</h5><p>42451 [42][45][1]<br>每段和最大值最小</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> N, M;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100010</span>]; <br><br><span class="hljs-comment">// 判断每段和都&lt;=x, 即最大值&lt;=x是否可行</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> cur_sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> part_cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;N)<br>    {   <br>        <span class="hljs-keyword">if</span> (a[i] &gt; x) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        cur_sum += a[i++];<br>        <span class="hljs-keyword">if</span> (cur_sum &gt; x)<br>        {<br>            i--;<br>            cur_sum = <span class="hljs-number">0</span>;<br>            part_cnt++;<br>        }<br>    }<br>    <span class="hljs-keyword">if</span> (cur_sum)<br>        part_cnt++;<br>    <span class="hljs-keyword">if</span> (part_cnt &gt; M)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt","r",stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;N, &amp;M);<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">-1</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);<br>        r += a[i];<br>        l = <span class="hljs-built_in">max</span>(l, a[i]);<br>    }<br>    r++;<br>    <span class="hljs-comment">// 满足judge(m)的最小的m</span><br>    <span class="hljs-keyword">while</span>(l &lt; r)<br>    {<br>        <span class="hljs-keyword">int</span> m = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(m))<br>        {<br>            r = m;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            l = m+<span class="hljs-number">1</span>;<br>        }<br><br>    }<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d"</span>, l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="洛谷-P1577-切绳子"><a href="#洛谷-P1577-切绳子" class="headerlink" title="洛谷 P1577 切绳子"></a>洛谷 P1577 切绳子</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> N, K;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">10010</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)<br>    {<br>        cnt += a[i] / m;<br>    }<br>    <span class="hljs-keyword">if</span> (cnt &gt;= K) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>, r=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">double</span> inp;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;N,&amp;K);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf"</span>,&amp;inp);<br>        a[i] = <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(inp * <span class="hljs-number">100000</span>);<br>        r = <span class="hljs-built_in">max</span>(r, a[i]);<br>    }<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    {<br>        <span class="hljs-keyword">double</span> m = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge</span>(m))<br>        {<br>            l = m + <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">else</span><br>        {<br>            r = m;<br>        }<br>    }<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf"</span>, (l<span class="hljs-number">-1</span>)/<span class="hljs-number">100000.0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h5 id="CodeForces-660C-Hard-Process"><a href="#CodeForces-660C-Hard-Process" class="headerlink" title="CodeForces 660C. Hard Process"></a>CodeForces 660C. Hard Process</h5><blockquote><p>给定n个01元素的数组，每次操作可以将一个0变为1，求最多经过K次操作最长的连续的1的个数。</p></blockquote><p><strong>最简单的方法0</strong><br>O(n^2)<br>枚举区间的左右端点[l, r], 如果其中0的个数&lt;=K, 则可以经过不超过K次将其全变为1，ans = max(ans, r - l + 1).<br>判断0的个数，可以用前缀和O(1)时间完成。<br><strong>方法1</strong><br>O(nlogn)<br>只枚举左端点l，右端点r即满足Zeros([l, idx])&lt;=k的最大的idx，可以二分答案。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> K, N, a[<span class="hljs-number">300010</span>], presum[<span class="hljs-number">300010</span>];<br><br><span class="hljs-comment">// NlogN</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;N, &amp;K);<br>    presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)<br>    {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);<br>        presum[i+<span class="hljs-number">1</span>] = a[i] + presum[i];<br>    }<br><br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">-1</span>, ans_l;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> L = <span class="hljs-number">0</span>; L &lt; N; ++L)<br>    {<br>        <span class="hljs-keyword">int</span> r = N, l = L;<br>        <span class="hljs-keyword">while</span>(l &lt; r)<br>        {<br>            <span class="hljs-keyword">int</span> m = l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 判断0的个数&lt;=K</span><br>            <span class="hljs-keyword">if</span> (m - L + <span class="hljs-number">1</span> - (presum[m+<span class="hljs-number">1</span>] - presum[L]) &lt;= K)<br>                l = m + <span class="hljs-number">1</span>;   <span class="hljs-comment">// 主要看+1在哪  l-1满足条件, r不满足</span><br>            <span class="hljs-keyword">else</span><br>                r = m;<br>        }<br>        <span class="hljs-comment">// l/r即第一个不满足条件的, 即0的个数&gt;K, 即[L, r-1]</span><br>        <span class="hljs-keyword">if</span> (r - L &gt; ans)<br>        {<br>            ans = r - L;<br>            ans_l = L;<br>        }<br><br>    }<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d\n"</span>, ans);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    {<br>        <span class="hljs-keyword">if</span> (i &gt;= ans_l &amp;&amp; i &lt; ans + ans_l)<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d"</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d"</span>, a[i]);<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%c"</span>, i==N<span class="hljs-number">-1</span>?<span class="hljs-string">'\n'</span>:<span class="hljs-string">' '</span>);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>方法2</strong><br>滑动窗口[l, r)，枚举l, r根据l的右移一定要右移，r是l经过K个0后延伸到最右的边界+1，注意r一直在增加，且最大值为N，因此时间复杂度为O(n)，记录滑动窗口的最大宽度(r - l)即可。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// freopen("input.txt", "r", stdin);</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>, &amp;N, &amp;K);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)<br>    {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;a[i]);<br>    }<br>    <span class="hljs-keyword">int</span> zeros = <span class="hljs-number">0</span>;<br>    pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; ans = <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>; l &lt; N; ++l)<br>    {<br>        <span class="hljs-comment">// 循环后，r指向加上即&gt;K的位置</span><br>        <span class="hljs-keyword">while</span>(r &lt; N &amp;&amp; (zeros + (a[r] == <span class="hljs-number">0</span>)) &lt;= K) <br>        {<br>            zeros += (a[r] == <span class="hljs-number">0</span>);<br>            r++;<br>        }<br>        ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">make_pair</span>(r-l, l));<br>        zeros -= a[l] == <span class="hljs-number">0</span>;<br>    }<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d\n"</span>, ans.first);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    {<br>        <span class="hljs-comment">// printf ("i=%d ", i);</span><br>        <span class="hljs-keyword">if</span> (i &gt;= ans.second &amp;&amp; i &lt; ans.first + ans.second)<br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d"</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%d"</span>, a[i]);<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">"%c"</span>, i==N<span class="hljs-number">-1</span>?<span class="hljs-string">'\n'</span>:<span class="hljs-string">' '</span>);<br>    }<br>    <span class="hljs-comment">// printf ("%d %d", ans.second, ans.first+ans.second-1);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>Notes:</strong></p><ol><li>注意pair的使用。</li></ol><h5 id="POJ-3111-K-Best"><a href="#POJ-3111-K-Best" class="headerlink" title="POJ 3111 K Best"></a>POJ 3111 K Best</h5><p>平均值最大化</p><h5 id="51nod1105-第K大的数"><a href="#51nod1105-第K大的数" class="headerlink" title="51nod1105 第K大的数"></a>51nod1105 第K大的数</h5><p>第K大的数</p><p>注意判断大于x的数的个数时，可以再次使用二分直接找到分界点。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二分法总结&quot;&gt;&lt;a href=&quot;#二分法总结&quot; class=&quot;headerlink&quot; title=&quot;二分法总结&quot;&gt;&lt;/a&gt;二分法总结&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
